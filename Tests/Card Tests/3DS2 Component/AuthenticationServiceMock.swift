//
// Copyright (c) 2022 Adyen N.V.
//
// This file is open source and available under the MIT license. See the LICENSE file for more info.
//

import Foundation
#if canImport(AdyenAuthentication)
    import AdyenAuthentication

    @available(iOS 14.0, *)
    internal final class AuthenticationServiceMock: AuthenticationServiceProtocol {
        internal var isRegistration: Bool = true
        
        internal var onRegister: ((_: RegistrationInput) async throws -> RegistrationOutput)?
        
        internal func register(with input: RegistrationInput) async throws -> RegistrationOutput {
            if let onRegister = onRegister {
                return try await onRegister(input)
            } else {
                // swiftlint:disable:next line_length
                return try JSONDecoder().decode(RegistrationOutput.self, from: "".dataFromBase64URL())
            }
        }
        
        internal var onAuthenticate: ((_: AuthenticationInput) async throws -> AuthenticationOutput)?
    
        internal func authenticate(with input: AuthenticationInput) async throws -> AuthenticationOutput {
            if let onAuthenticate = onAuthenticate {
                return try await onAuthenticate(input)
            } else if isRegistration {
                throw AdyenAuthenticationError.noStoredCredentialsMatch(nil)
            } else {
                // swiftlint:disable:next line_length
                return try JSONDecoder().decode(AuthenticationOutput.self, from: "eyJycElkIjoiQjJOWVNTNTkzMi5jb20uYWR5ZW4uQ2hlY2tvdXREZW1vVUlLaXQiLCJ2ZXJzaW9uIjoxLCJkZXZpY2UiOiJpT1MiLCJhc3NlcnRpb25PYmplY3QiOiJvbWx6YVdkdVlYUjFjbVZZUnpCRkFpQmxObG9HV2thc0ZkMDJrK1NTd0hLY0oxWkdrczkxeUZjaG02b2Y3UEdnbEFJaEFKK1prNzFxdkJFaGllR0xqMzFXcG5tckdjWHlZV2VsYUREUnhhV2licGtLY1dGMWRHaGxiblJwWTJGMGIzSkVZWFJoV0NVdkxjTFU2NG4zZjRpaXdcL3BVWnpTcXVXV2lWZHhwNHhETDFNZ091NWdwWDBBQUFBQUIiLCJjcmVkZW50aWFsSWQiOiIyNmZ5M1NrSkIwZVFmcFFwZ3NkQ3R5dWt2TDBEVWdBRk51XC9FaGZRa1p2QT0ifQ".dataFromBase64URL())
            }
        }
    
        internal func reset() throws {}
    
        internal func checkSupport() throws -> CheckSupportOutput {
            try JSONDecoder().decode(CheckSupportOutput.self, from: Data(base64Encoded: "eyJkZXZpY2UiOiJpT1MifQ")!)
        }
    
    }

    extension String {
    
        internal func dataFromBase64URL() throws -> Data {
            var base64 = self
            base64 = base64.replacingOccurrences(of: "-", with: "+")
            base64 = base64.replacingOccurrences(of: "_", with: "/")
            while base64.count % 4 != 0 {
                base64 = base64.appending("=")
            }
            guard let data = Data(base64Encoded: base64) else {
                throw AdyenAuthenticationError.invalidBase64String
            }
            return data
        }
        
        internal func toBase64URL() -> String {
            var result = self
            result = result.replacingOccurrences(of: "+", with: "-")
            result = result.replacingOccurrences(of: "/", with: "_")
            result = result.replacingOccurrences(of: "=", with: "")
            return result
        }
    }
#endif
