name: Build and Test

on:
  push:
    branches:
    - master
    - develop

jobs:
  tests:
    runs-on: macos-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        destination: ['name=iPhone 8']
        include:
          - destination: 'name=iPhone X,OS=12.4'
          - destination: 'name=iPhone 11,OS=14.0'
            
    steps:
    - uses: actions/checkout@v2
    
    - name: Set Xcode Version
      run: |
        echo '::set-env name=XCODE_VERSION::/Applications/Xcode_11.4.1.app/Contents/Developer'

    - name: Prepare iOS 12.4 simulator
      if: contains(matrix.destination, 'OS=12.4')
      run: |
        sudo mkdir -p /Library/Developer/CoreSimulator/Profiles/Runtimes
        sudo ln -s /Applications/Xcode_10.3.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 12.4.simruntime
        xcrun simctl create custom-test-device "iPhone X" "com.apple.CoreSimulator.SimRuntime.iOS-12-4"
        xcrun simctl list devices 12.4
        
    - name: Prepare iOS 14.0 simulator
      if: contains(matrix.destination, 'OS=14.0')
      run: |
        sudo mkdir -p /Library/Developer/CoreSimulator/Profiles/Runtimes
        sudo ln -s /Applications/Xcode_12_beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/CoreSimulator/Profiles/Runtimes/iOS.simruntime /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 14.0.simruntime
        xcrun simctl create custom-test-device "iPhone 11" "com.apple.CoreSimulator.SimRuntime.iOS-14-0"
        xcrun simctl list devices 14.0
        
    - name: Check Dependencies
      uses: actions/cache@v1
      id: carthage-cache
      with:
        path: Carthage
        key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
      
    - name: Install Dependencies
      if: steps.carthage-cache.outputs.cache-hit != 'true'
      run: |
        carthage bootstrap --platform iOS --cache-builds
      
    - name: Build and test
      run: |
        xcodebuild -project Adyen.xcodeproj -scheme AdyenUIHost -destination "${destination}" -derivedDataPath ./DerivedData -enableCodeCoverage YES build test | xcpretty
      env:
        destination: ${{ matrix.destination }}
        DEVELOPER_DIR: ${{ env.XCODE_VERSION }}
        
  sonar:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2 
        
    - name: Install Dependencies
      run: |
        brew install sonar-scanner
        brew install swiftlint
        gem install slather
        
    - name: Check Dependencies
      uses: actions/cache@v1
      id: carthage-cache
      with:
        path: Carthage
        key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
      
    - name: Install Dependencies
      if: steps.carthage-cache.outputs.cache-hit != 'true'
      run: |
        carthage bootstrap --platform iOS --cache-builds
      env:
         GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         
    - name: Setup Build Wrapper
      run: |
        curl -sS https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip > build-wrapper.zip
        unzip build-wrapper.zip
        rm build-wrapper.zip
        mkdir -p reports/build-wrapper
      
    - name: Build and test
      run: |
        build-wrapper-macosx-x86/build-wrapper-macosx-x86 --out-dir reports/build-wrapper xcodebuild -project Adyen.xcodeproj -scheme AdyenUIHost -derivedDataPath ./DerivedData -enableCodeCoverage YES clean build test -destination "name=iPhone 11" | xcpretty
                
    - name: Slather
      run: |
        slather coverage --sonarqube-xml --build-directory ./DerivedData --output-directory ./reports --scheme AdyenUIHost --binary-basename Adyen --binary-basename AdyenCard --binary-basename AdyenDropIn --binary-basename AdyenWeChatPay Adyen.xcodeproj
        slather coverage --cobertura-xml --build-directory ./DerivedData --output-directory ./reports --scheme AdyenUIHost --binary-basename Adyen --binary-basename AdyenCard --binary-basename AdyenDropIn --binary-basename AdyenWeChatPay Adyen.xcodeproj
         
    - name: SwiftLint
      run: |
        fastlane run swiftlint output_file:"./reports/swiftlint.json" reporter:"json" ignore_exit_status:"true"
        
    - name: Run Sonar
      run: |
        sonar-scanner -X -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Code coverage
      if: github.ref == 'refs/heads/develop'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./reports/cobertura.xml
