#!/usr/bin/env xcrun swift

import Foundation

if CommandLine.arguments[1] == "--help" || CommandLine.arguments[1] == "-h" {
    print(
        """
        OVERVIEW: Generates localization keys as constants.

        USAGE: ./generate_localization_keys.swift <path-to-localizable.strings> <path-to-output-file>

        ARGUMENTS:
            <path-to-localizable.strings>               Relative path to Localizable.strings.
            <path-to-output-file>                       Relative path to the result swift file.

        OPTIONS:
            -h, --help                                  Show help information.
        """
    )
    exit(0)
}

let header =
    """
    //
    // Copyright (c) 2021 Adyen N.V.
    //
    // This file is open source and available under the MIT license. See the LICENSE file for more info.
    // This file is autogenerated. Please do not modify it.


    """

let structName = "LocalizationKey"
let indent = "    "

func extractKey(_ line: String) -> String {
    String(line.prefix(while: { $0 != " " }))
        .trimmingCharacters(in: CharacterSet(charactersIn: "\""))
}

func capitalizeFirstLetter(_ string: String) -> String {
    string.prefix(1).capitalized + string.dropFirst()
}

func indentLines(_ lines: [String], with indent: String) -> [String] {
    lines.map { indent.appending($0) }
}

func formatKeyToName(_ key: String) -> String {
    let comps = key.components(separatedBy: ".")
        .dropFirst()
    return Array(comps.prefix(1) + comps.dropFirst().map(capitalizeFirstLetter(_:)))
        .joined()
}

func generate(_ name: String, _ key: String) -> String {
    String(format: "public static let %@ = %@(key: \"%@\")", name, structName, key)
}

func generateStruct(
    _ lines: [String],
    indent: String = indent
) -> String {
    let generatedLines: [[String]] = [
        ["/// :nodoc:", "public struct \(structName) {", ""],
        indentLines(lines, with: indent),
        indentLines(["", "internal let key: String", ""], with: indent),
        indentLines(generateInit(), with: indent),
        ["", "}", ""]
    ]
    return generatedLines
        .flatMap { $0 }
        .joined(separator: "\n")
}

func generateInit(indent: String = indent) -> [String] {
    [
        "public init(key: String) {",
        "\(indent)self.key = key",
        "}"
    ]
}

let inputPath = CommandLine.arguments[1]
let outputPath = CommandLine.arguments[2]
let fm = FileManager.default
let cwd = fm.currentDirectoryPath
let inputURL = URL(fileURLWithPath: inputPath, relativeTo: URL(fileURLWithPath: cwd, isDirectory: true))

guard let fileContents = FileManager.default.contents(atPath: inputURL.relativePath),
      let strings = String(data: fileContents, encoding: .utf8) else {
    fatalError("Error reading input file at \(inputURL.relativePath)")
}

let lines = strings.components(separatedBy: .newlines)
    .filter { $0.isEmpty == false }
    .map(extractKey)
    .map { (formatKeyToName($0), $0) }
    .map(generate)

print("Detected \(lines.count) localizable keys")

let finalStruct = generateStruct(lines)
let finalResult = header.appending(finalStruct)

guard let data = finalResult.data(using: .utf8) else {
    print("Error creating writeable from generated string")
    fatalError()
}

let outputURL = URL(
    fileURLWithPath: outputPath,
    relativeTo: URL(fileURLWithPath: cwd, isDirectory: true)
)

if fm.fileExists(atPath: outputURL.relativePath) {
    print("Output file already exists at \(outputURL.absoluteString). Replacing the contents")
    do {
        try data.write(to: outputURL)
    } catch {
        print("File writing to \(outputURL.relativePath) failed with \(error)")
    }
} else {
    print("Output file does not exist at \(outputURL.absoluteString). Proceeding with creation...")
    if fm.createFile(atPath: outputURL.relativePath, contents: data, attributes: nil) {
        print("Output file successfuly created")
    } else {
        print("Output file creation failed")
    }
}
