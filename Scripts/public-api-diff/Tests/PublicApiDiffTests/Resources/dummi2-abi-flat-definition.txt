import AVFoundation
import CoreTelephony
import Foundation
import Foundation
import Foundation
import Foundation
import PassKit
import SwiftOnoneSupport
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_spi(STP) public struct EmptyResponse : Decodable, UnknownFieldsDecodable
@_spi(STP) public var _allResponseFieldsStorage: StripeCore.NonEncodableParameters? { get set }
@_spi(STP) public func init(from: any Swift.Decoder) throws -> StripeCore.EmptyResponse
@_spi(STP) public struct StripeFile : Decodable, Equatable, UnknownFieldsDecodable
@_spi(STP) public enum Purpose : Decodable, Encodable, Equatable, Hashable, RawRepresentable, SafeEnumCodable, SafeEnumDecodable
@_spi(STP) public case disputeEvidence
@_spi(STP) public case identityDocument
@_spi(STP) public case identityPrivate
@_spi(STP) public case unparsable
@_spi(STP) public func init(rawValue: Swift.String) -> StripeCore.StripeFile.Purpose?
@_spi(STP) public typealias RawValue = Swift.String
@_spi(STP) public var rawValue: Swift.String { get }
@_spi(STP) public let created: Foundation.Date { get }
@_spi(STP) public let id: Swift.String { get }
@_spi(STP) public let purpose: StripeCore.StripeFile.Purpose { get }
@_spi(STP) public let size: Swift.Int { get }
@_spi(STP) public let type: Swift.String? { get }
@_spi(STP) public var _allResponseFieldsStorage: StripeCore.NonEncodableParameters? { get set }
@_spi(STP) public static func __derived_struct_equals(_: StripeCore.StripeFile, _: StripeCore.StripeFile) -> Swift.Bool
@_spi(STP) public func init(from: any Swift.Decoder) throws -> StripeCore.StripeFile
public class STPAPIClient : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol
public static let STPSDKVersion: Swift.String { get }
public static let shared: StripeCore.STPAPIClient { get }
public var publishableKey: Swift.String? { get set }
@_spi(STP) public var _stored_configuration: ObjectiveC.NSObject? { get set }
public var stripeAccount: Swift.String? { get set }
public var appInfo: StripeCore.STPAppInfo? { get set }
public static let apiVersion: Swift.String { get }
@_spi(STP) public var apiURL: Foundation.URL! { get set }
@_spi(STP) public var urlSession: Foundation.URLSession { get set }
@_spi(STP) public var sourcePollers: [Swift.String : ObjectiveC.NSObject]? { get set }
@_spi(STP) public var sourcePollersQueue: Dispatch.DispatchQueue? { get set }
@_spi(STP) public var betas: Swift.Set<Swift.String> { get set }
@_spi(STP) public var publishableKeyIsUserKey: Swift.Bool { get }
@_spi(DashboardOnly) public var userKeyLiveMode: Swift.Bool { get set }
public func init() -> StripeCore.STPAPIClient
public func init(publishableKey: Swift.String) -> StripeCore.STPAPIClient
@_spi(STP) public func configuredRequest(for: Foundation.URL, using: Swift.String? = $DEFAULT_ARG, additionalHeaders: [Swift.String : Swift.String] = $DEFAULT_ARG) -> Foundation.URLRequest
@_spi(STP) public func authorizationHeader(using: Swift.String? = $DEFAULT_ARG) -> [Swift.String : Swift.String]
@_spi(STP) public var isTestmode: Swift.Bool { get }
@_spi(STP) public typealias FileAndUploadMetrics = (file: StripeCore.StripeFile, metrics: StripeCore.STPAPIClient.ImageUploadMetrics)
@_spi(STP) public struct ImageUploadMetrics
@_spi(STP) public let timeToUpload: Foundation.TimeInterval { get }
@_spi(STP) public let fileSizeBytes: Swift.Int { get }
@_spi(STP) public static let defaultImageFileName: Swift.String { get }
@_spi(STP) public func uploadImage(_: UIKit.UIImage, compressionQuality: CoreGraphics.CGFloat = $DEFAULT_ARG, purpose: Swift.String, fileName: Swift.String = $DEFAULT_ARG, ownedBy: Swift.String? = $DEFAULT_ARG, ephemeralKeySecret: Swift.String? = $DEFAULT_ARG, completion: (Swift.Result<StripeCore.StripeFile, any Swift.Error>) -> Swift.Void) -> Swift.Void
@_spi(STP) public func uploadImageAndGetMetrics(_: UIKit.UIImage, compressionQuality: CoreGraphics.CGFloat = $DEFAULT_ARG, purpose: Swift.String, fileName: Swift.String = $DEFAULT_ARG, ownedBy: Swift.String? = $DEFAULT_ARG, ephemeralKeySecret: Swift.String? = $DEFAULT_ARG, completion: (Swift.Result<StripeCore.STPAPIClient.FileAndUploadMetrics, any Swift.Error>) -> Swift.Void) -> Swift.Void
@_spi(STP) public func uploadImage(_: UIKit.UIImage, compressionQuality: CoreGraphics.CGFloat = $DEFAULT_ARG, purpose: Swift.String, fileName: Swift.String = $DEFAULT_ARG, ownedBy: Swift.String? = $DEFAULT_ARG, ephemeralKeySecret: Swift.String? = $DEFAULT_ARG) -> StripeCore.Future<StripeCore.StripeFile>
@_spi(STP) public func uploadImageAndGetMetrics(_: UIKit.UIImage, compressionQuality: CoreGraphics.CGFloat = $DEFAULT_ARG, purpose: Swift.String, fileName: Swift.String = $DEFAULT_ARG, ownedBy: Swift.String? = $DEFAULT_ARG, ephemeralKeySecret: Swift.String? = $DEFAULT_ARG) -> StripeCore.Future<StripeCore.STPAPIClient.FileAndUploadMetrics>
@_spi(STP) public func get(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = $DEFAULT_ARG, completion: (Swift.Result<T, any Swift.Error>) -> Swift.Void) -> Swift.Void
@_spi(STP) public func get(url: Foundation.URL, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = $DEFAULT_ARG, completion: (Swift.Result<T, any Swift.Error>) -> Swift.Void) -> Swift.Void
@_spi(STP) public func get(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = $DEFAULT_ARG) -> StripeCore.Promise<T>
@_spi(STP) public func post(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = $DEFAULT_ARG, completion: (Swift.Result<T, any Swift.Error>) -> Swift.Void) -> Swift.Void
@_spi(STP) public func post(url: Foundation.URL, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = $DEFAULT_ARG, completion: (Swift.Result<T, any Swift.Error>) -> Swift.Void) -> Swift.Void
@_spi(STP) public func post(resource: Swift.String, parameters: [Swift.String : Any], ephemeralKeySecret: Swift.String? = $DEFAULT_ARG) -> StripeCore.Promise<T>
@_spi(STP) public func post(resource: Swift.String, object: I, ephemeralKeySecret: Swift.String? = $DEFAULT_ARG) -> StripeCore.Promise<O>
@_spi(STP) public func post(resource: Swift.String, object: I, ephemeralKeySecret: Swift.String? = $DEFAULT_ARG, completion: (Swift.Result<O, any Swift.Error>) -> Swift.Void) -> Swift.Void
@_spi(STP) public func post(url: Foundation.URL, object: I, ephemeralKeySecret: Swift.String? = $DEFAULT_ARG, completion: (Swift.Result<O, any Swift.Error>) -> Swift.Void) -> Swift.Void
@_spi(STP) public static func decodeResponse(data: Foundation.Data?, error: (any Swift.Error)?, response: Foundation.URLResponse?) -> Swift.Result<T, any Swift.Error>
public class STPAppInfo : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol
public func init(name: Swift.String, partnerId: Swift.String?, version: Swift.String?, url: Swift.String?) -> StripeCore.STPAppInfo
public var name: Swift.String { get }
public var partnerId: Swift.String? { get }
public var version: Swift.String? { get }
public var url: Swift.String? { get }
public func init() -> StripeCore.STPAppInfo
public class StripeAPI : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol
public static var defaultPublishableKey: Swift.String? { get set }
public func setDefaultPublishableKey(_: Swift.String) -> Swift.Void
public static var advancedFraudSignalsEnabled: Swift.Bool { get set }
public static var maxRetries: Swift.Int { get set }
public static var jcbPaymentNetworkSupported: Swift.Bool { get set }
public static var additionalEnabledApplePayNetworks: [PassKit.PKPaymentNetwork] { get set }
public static func canSubmitPaymentRequest(_: PassKit.PKPaymentRequest) -> Swift.Bool
@_spi(STP) public static func supportedPKPaymentNetworks() -> [PassKit.PKPaymentNetwork]
public static func deviceSupportsApplePay() -> Swift.Bool
public static func paymentRequest(withMerchantIdentifier: Swift.String, country: Swift.String, currency: Swift.String) -> PassKit.PKPaymentRequest
@discardableResult public static func handleURLCallback(with: Foundation.URL) -> Swift.Bool
public func init() -> StripeCore.StripeAPI
@_spi(STP) public struct StripeAPIConfiguration
@_spi(STP) public static let sharedUrlSessionConfiguration: Foundation.URLSessionConfiguration { get }
@_spi(STP) public static let STPSDKVersion: Swift.String { get }
@_spi(STP) public enum StripeError : AnalyticLoggableError, AnalyticLoggableErrorV2, Error, LocalizedError, Sendable
@_spi(STP) public case apiError(StripeCore.StripeAPIError)
@_spi(STP) public case invalidRequest
@_spi(STP) public var localizedDescription: Swift.String { get }
@_spi(STP) public var additionalNonPIIErrorDetails: [Swift.String : Any] { get }
@_spi(STP) public var analyticsErrorCode: Swift.String { get }
@_spi(STP) public var analyticsErrorType: Swift.String { get }
@_spi(STP) public var errorDescription: Swift.String? { get }
@_spi(STP) public var failureReason: Swift.String? { get }
@_spi(STP) public var recoverySuggestion: Swift.String? { get }
@_spi(STP) public var helpAnchor: Swift.String? { get }
@_spi(STP) public func analyticLoggableSerializeForLogging() -> [Swift.String : Any]
@_spi(STP) public struct StripeAPIError : Decodable, UnknownFieldsDecodable
@_spi(STP) public var type: StripeCore.StripeAPIError.ErrorType { get set }
@_spi(STP) public var code: Swift.String? { get set }
@_spi(STP) public var docUrl: Foundation.URL? { get set }
@_spi(STP) public var message: Swift.String? { get set }
@_spi(STP) public var param: Swift.String? { get set }
@_spi(STP) public var statusCode: Swift.Int? { get set }
@_spi(STP) public var requestID: Swift.String? { get set }
@_spi(STP) public enum ErrorType : Decodable, Encodable, Equatable, Hashable, RawRepresentable, SafeEnumCodable, SafeEnumDecodable
@_spi(STP) public case apiError
@_spi(STP) public case cardError
@_spi(STP) public case idempotencyError
@_spi(STP) public case invalidRequestError
@_spi(STP) public case unparsable
@_spi(STP) public func init(rawValue: Swift.String) -> StripeCore.StripeAPIError.ErrorType?
@_spi(STP) public typealias RawValue = Swift.String
@_spi(STP) public var rawValue: Swift.String { get }
@_spi(STP) public var _allResponseFieldsStorage: StripeCore.NonEncodableParameters? { get set }
@_spi(STP) public func init(from: any Swift.Decoder) throws -> StripeCore.StripeAPIError
@_spi(STP) public struct StripeAPIErrorResponse : Decodable, UnknownFieldsDecodable
@_spi(STP) public var error: StripeCore.StripeAPIError? { get set }
@_spi(STP) public var _allResponseFieldsStorage: StripeCore.NonEncodableParameters? { get set }
@_spi(STP) public func init(from: any Swift.Decoder) throws -> StripeCore.StripeAPIErrorResponse
@_spi(STP) public protocol Analytic
@_spi(STP) public var event: StripeCore.STPAnalyticEvent { get }
@_spi(STP) public var params: [Swift.String : Any] { get }
@_spi(STP) public struct GenericAnalytic : Analytic
@_spi(STP) public let event: StripeCore.STPAnalyticEvent { get }
@_spi(STP) public let params: [Swift.String : Any] { get }
@_spi(STP) public func init(event: StripeCore.STPAnalyticEvent, params: [Swift.String : Any]) -> StripeCore.GenericAnalytic
@_spi(STP) public protocol AnalyticLoggableError : Error, Sendable
@_spi(STP) public var analyticsErrorType: Swift.String { get }
@_spi(STP) public var analyticsErrorCode: Swift.String { get }
@_spi(STP) public var additionalNonPIIErrorDetails: [Swift.String : Any] { get }
@_spi(STP) public protocol AnalyticLoggableErrorV2 : Error, Sendable
@_spi(STP) public func analyticLoggableSerializeForLogging() -> [Swift.String : Any]
@_spi(STP) public protocol AnalyticLoggableStringErrorV2 : Error, Sendable
@_spi(STP) public var loggableType: Swift.String { get }
@_spi(STP) public var loggableType: Swift.String { get }
@_spi(STP) public protocol AnalyticsClientV2Protocol
@_spi(STP) public var clientId: Swift.String { get }
@_spi(STP) public func log(eventName: Swift.String, parameters: [Swift.String : Any]) -> Swift.Void
@_spi(STP) public func makeCommonPayload() -> [Swift.String : Any]
@_spi(STP) public func payload(withEventName: Swift.String, parameters: [Swift.String : Any]) -> [Swift.String : Any]
@_spi(STP) public class AnalyticsClientV2 : AnalyticsClientV2Protocol
@_spi(STP) public let clientId: Swift.String { get }
@_spi(STP) public let origin: Swift.String { get }
@_spi(STP) public func init(clientId: Swift.String, origin: Swift.String) -> StripeCore.AnalyticsClientV2
@_spi(STP) public static func serialize(error: any Swift.Error, filePath: Swift.StaticString?, line: Swift.UInt?) -> [Swift.String : Any]
@_spi(STP) public func log(eventName: Swift.String, parameters: [Swift.String : Any]) -> Swift.Void
@_spi(STP) public class AnalyticsHelper
@_spi(STP) public enum TimeMeasurement : Equatable, Hashable
@_spi(STP) public case checkout
@_spi(STP) public case linkSignup
@_spi(STP) public case linkPopup
@_spi(STP) public case formShown
@_spi(STP) public static func __derived_enum_equals(_: StripeCore.AnalyticsHelper.TimeMeasurement, _: StripeCore.AnalyticsHelper.TimeMeasurement) -> Swift.Bool
@_spi(STP) public func hash(into: Swift.Hasher) -> Swift.Void
@_spi(STP) public var hashValue: Swift.Int { get }
@_spi(STP) public static let shared: StripeCore.AnalyticsHelper { get }
@_spi(STP) public var sessionID: Swift.String? { get }
@_spi(STP) public var didSendPaymentSheetFormInteractedEventAfterFormShown: Swift.Bool { get set }
@_spi(STP) public func generateSessionID() -> Swift.Void
@_spi(STP) public func startTimeMeasurement(_: StripeCore.AnalyticsHelper.TimeMeasurement) -> Swift.Void
@_spi(STP) public func getDuration(for: StripeCore.AnalyticsHelper.TimeMeasurement) -> Foundation.TimeInterval?
@_spi(STP) public enum STPAnalyticEvent : Equatable, Hashable, RawRepresentable
@_spi(STP) public case tokenCreation
@_spi(STP) public case sourceCreation
@_spi(STP) public case paymentMethodCreation
@_spi(STP) public case paymentMethodUpdate
@_spi(STP) public case paymentMethodIntentCreation
@_spi(STP) public case setupIntentConfirmationAttempt
@_spi(STP) public case _3DS2AuthenticationRequestParamsFailed
@_spi(STP) public case _3DS2AuthenticationAttempt
@_spi(STP) public case _3DS2FrictionlessFlow
@_spi(STP) public case urlRedirectNextAction
@_spi(STP) public case urlRedirectNextActionCompleted
@_spi(STP) public case _3DS2ChallengeFlowPresented
@_spi(STP) public case _3DS2ChallengeFlowTimedOut
@_spi(STP) public case _3DS2ChallengeFlowUserCanceled
@_spi(STP) public case _3DS2ChallengeFlowCompleted
@_spi(STP) public case _3DS2ChallengeFlowErrored
@_spi(STP) public case _3DS2RedirectUserCanceled
@_spi(STP) public case paymentHandlerConfirmStarted
@_spi(STP) public case paymentHandlerConfirmFinished
@_spi(STP) public case paymentHandlerHandleNextActionStarted
@_spi(STP) public case paymentHandlerHandleNextActionFinished
@_spi(STP) public case cardMetadataLoadedTooSlow
@_spi(STP) public case cardMetadataResponseFailure
@_spi(STP) public case cardMetadataMissingRange
@_spi(STP) public case cardScanSucceeded
@_spi(STP) public case cardScanCancelled
@_spi(STP) public case cardElementConfigLoadFailure
@_spi(STP) public case verificationSheetPresented
@_spi(STP) public case verificationSheetClosed
@_spi(STP) public case verificationSheetFailed
@_spi(STP) public case financialConnectionsSheetPresented
@_spi(STP) public case financialConnectionsSheetClosed
@_spi(STP) public case financialConnectionsSheetFailed
@_spi(STP) public case mcInitCustomCustomer
@_spi(STP) public case mcInitCompleteCustomer
@_spi(STP) public case mcInitCustomApplePay
@_spi(STP) public case mcInitCompleteApplePay
@_spi(STP) public case mcInitCustomCustomerApplePay
@_spi(STP) public case mcInitCompleteCustomerApplePay
@_spi(STP) public case mcInitCustomDefault
@_spi(STP) public case mcInitCompleteDefault
@_spi(STP) public case mcShowCustomNewPM
@_spi(STP) public case mcShowCustomSavedPM
@_spi(STP) public case mcShowCustomApplePay
@_spi(STP) public case mcShowCustomLink
@_spi(STP) public case mcShowCompleteNewPM
@_spi(STP) public case mcShowCompleteSavedPM
@_spi(STP) public case mcShowCompleteApplePay
@_spi(STP) public case mcShowCompleteLink
@_spi(STP) public case mcPaymentCustomNewPMSuccess
@_spi(STP) public case mcPaymentCustomSavedPMSuccess
@_spi(STP) public case mcPaymentCustomApplePaySuccess
@_spi(STP) public case mcPaymentCustomLinkSuccess
@_spi(STP) public case mcPaymentCompleteNewPMSuccess
@_spi(STP) public case mcPaymentCompleteSavedPMSuccess
@_spi(STP) public case mcPaymentCompleteApplePaySuccess
@_spi(STP) public case mcPaymentCompleteLinkSuccess
@_spi(STP) public case mcPaymentCustomNewPMFailure
@_spi(STP) public case mcPaymentCustomSavedPMFailure
@_spi(STP) public case mcPaymentCustomApplePayFailure
@_spi(STP) public case mcPaymentCustomLinkFailure
@_spi(STP) public case mcPaymentCompleteNewPMFailure
@_spi(STP) public case mcPaymentCompleteSavedPMFailure
@_spi(STP) public case mcPaymentCompleteApplePayFailure
@_spi(STP) public case mcPaymentCompleteLinkFailure
@_spi(STP) public case mcOptionSelectCustomNewPM
@_spi(STP) public case mcOptionSelectCustomSavedPM
@_spi(STP) public case mcOptionSelectCustomApplePay
@_spi(STP) public case mcOptionSelectCustomLink
@_spi(STP) public case mcOptionSelectCompleteNewPM
@_spi(STP) public case mcOptionSelectCompleteSavedPM
@_spi(STP) public case mcOptionSelectCompleteApplePay
@_spi(STP) public case mcOptionSelectCompleteLink
@_spi(STP) public case linkSignupCheckboxChecked
@_spi(STP) public case linkSignupFlowPresented
@_spi(STP) public case linkSignupStart
@_spi(STP) public case linkSignupComplete
@_spi(STP) public case linkSignupFailure
@_spi(STP) public case linkCreatePaymentDetailsFailure
@_spi(STP) public case linkSharePaymentDetailsFailure
@_spi(STP) public case linkSignupFailureInvalidSessionState
@_spi(STP) public case linkSignupFailureAccountExists
@_spi(STP) public case linkPopupShow
@_spi(STP) public case linkPopupSuccess
@_spi(STP) public case linkPopupCancel
@_spi(STP) public case linkPopupSkipped
@_spi(STP) public case linkPopupError
@_spi(STP) public case linkPopupLogout
@_spi(STP) public case linkAccountLookupComplete
@_spi(STP) public case linkAccountLookupFailure
@_spi(STP) public case luxeSerializeFailure
@_spi(STP) public case luxeSpecSerializeFailure
@_spi(STP) public case luxeImageSelectorIconDownloaded
@_spi(STP) public case luxeImageSelectorIconFromBundle
@_spi(STP) public case luxeImageSelectorIconNotFound
@_spi(STP) public case customerSheetLoadStarted
@_spi(STP) public case customerSheetLoadSucceeded
@_spi(STP) public case customerSheetLoadFailed
@_spi(STP) public case cs_add_payment_method_screen_presented
@_spi(STP) public case cs_select_payment_method_screen_presented
@_spi(STP) public case cs_select_payment_method_screen_confirmed_savedpm_success
@_spi(STP) public case cs_select_payment_method_screen_confirmed_savedpm_failure
@_spi(STP) public case cs_select_payment_method_screen_edit_tapped
@_spi(STP) public case cs_select_payment_method_screen_done_tapped
@_spi(STP) public case cs_select_payment_method_screen_removepm_success
@_spi(STP) public case cs_select_payment_method_screen_removepm_failure
@_spi(STP) public case cs_add_payment_method_via_setupintent_success
@_spi(STP) public case cs_add_payment_method_via_setupintent_canceled
@_spi(STP) public case cs_add_payment_method_via_setupintent_failure
@_spi(STP) public case cs_add_payment_method_via_createAttach_success
@_spi(STP) public case cs_add_payment_method_via_createAttach_failure
@_spi(STP) public case addressShow
@_spi(STP) public case addressCompleted
@_spi(STP) public case paymentMethodMessagingViewLoadSucceeded
@_spi(STP) public case paymentMethodMessagingViewLoadFailed
@_spi(STP) public case paymentMethodMessagingViewTapped
@_spi(STP) public case paymentSheetForceSuccess
@_spi(STP) public case paymentSheetLoadStarted
@_spi(STP) public case paymentSheetLoadSucceeded
@_spi(STP) public case paymentSheetLoadFailed
@_spi(STP) public case paymentSheetDismissed
@_spi(STP) public case paymentSheetCarouselPaymentMethodTapped
@_spi(STP) public case paymentSheetConfirmButtonTapped
@_spi(STP) public case paymentSheetFormShown
@_spi(STP) public case paymentSheetFormInteracted
@_spi(STP) public case paymentSheetCardNumberCompleted
@_spi(STP) public case paymentSheetElementsSessionLoadFailed
@_spi(STP) public case paymentSheetElementsSessionCustomerDeserializeFailed
@_spi(STP) public case paymentSheetElementsSessionEPMLoadFailed
@_spi(STP) public case paymentSheetDisplayCardBrandDropdownIndicator
@_spi(STP) public case paymentSheetOpenCardBrandDropdown
@_spi(STP) public case paymentSheetCloseCardBrandDropDown
@_spi(STP) public case paymentSheetOpenCardBrandEditScreen
@_spi(STP) public case paymentSheetUpdateCardBrand
@_spi(STP) public case paymentSheetUpdateCardBrandFailed
@_spi(STP) public case paymentSheetClosesEditScreen
@_spi(STP) public case customerSheetDisplayCardBrandDropdownIndicator
@_spi(STP) public case customerSheetOpenCardBrandDropdown
@_spi(STP) public case customerSheetCloseCardBrandDropDown
@_spi(STP) public case customerSheetOpenCardBrandEditScreen
@_spi(STP) public case customerSheetUpdateCardBrand
@_spi(STP) public case customerSheetUpdateCardBrandFailed
@_spi(STP) public case customerSheetClosesEditScreen
@_spi(STP) public case biLoadStarted
@_spi(STP) public case biLoadSucceeded
@_spi(STP) public case biLoadFailed
@_spi(STP) public case biPaymentCompleteNewPMSuccess
@_spi(STP) public case biPaymentCompleteSavedPMSuccess
@_spi(STP) public case biPaymentCompleteApplePaySuccess
@_spi(STP) public case biPaymentCompleteNewPMFailure
@_spi(STP) public case biPaymentCompleteSavedPMFailure
@_spi(STP) public case biPaymentCompleteApplePayFailure
@_spi(STP) public case biOptionsShown
@_spi(STP) public case biFormShown
@_spi(STP) public case biFormInteracted
@_spi(STP) public case biCardNumberCompleted
@_spi(STP) public case biDoneButtonTapped
@_spi(STP) public case bankAccountCollectorStarted
@_spi(STP) public case bankAccountCollectorFinished
@_spi(STP) public case unexpectedPaymentSheetFormFactoryError
@_spi(STP) public case unexpectedStripeUICoreAddressSpecProvider
@_spi(STP) public case unexpectedStripeUICoreBSBNumberProvider
@_spi(STP) public case unexpectedApplePayError
@_spi(STP) public case unexpectedPaymentSheetError
@_spi(STP) public case unexpectedCustomerSheetError
@_spi(STP) public case unexpectedPaymentSheetConfirmationError
@_spi(STP) public case unexpectedPaymentSheetViewControllerError
@_spi(STP) public case unexpectedFlowControllerViewControllerError
@_spi(STP) public case unexpectedPaymentHandlerError
@_spi(STP) public case stripePaymentSheetDownloadManagerError
@_spi(STP) public case refreshPaymentIntentStarted
@_spi(STP) public case refreshSetupIntentStarted
@_spi(STP) public case refreshPaymentIntentSuccess
@_spi(STP) public case refreshSetupIntentSuccess
@_spi(STP) public case refreshPaymentIntentFailed
@_spi(STP) public case refreshSetupIntentFailed
@_spi(STP) public func init(rawValue: Swift.String) -> StripeCore.STPAnalyticEvent?
@_spi(STP) public typealias RawValue = Swift.String
@_spi(STP) public var rawValue: Swift.String { get }
@_spi(STP) public struct ErrorAnalytic : Analytic
@_spi(STP) public let event: StripeCore.STPAnalyticEvent { get }
@_spi(STP) public let error: any Swift.Error { get }
@_spi(STP) public var params: [Swift.String : Any] { get }
@_spi(STP) public func init(event: StripeCore.STPAnalyticEvent, error: any Swift.Error, additionalNonPIIParams: [Swift.String : Any] = $DEFAULT_ARG) -> StripeCore.ErrorAnalytic
@_spi(STP) public protocol STPAnalyticsProtocol
@_spi(STP) public static var stp_analyticsIdentifier: Swift.String { get }
@_spi(STP) public protocol STPAnalyticsClientProtocol
@_spi(STP) public func addClass(toProductUsageIfNecessary: T.Type) -> Swift.Void
@_spi(STP) public func log(analytic: any StripeCore.Analytic, apiClient: StripeCore.STPAPIClient) -> Swift.Void
@_spi(STP) public protocol STPAnalyticsClientDelegate
@_spi(STP) public func analyticsClientDidLog(analyticsClient: StripeCore.STPAnalyticsClient, payload: [Swift.String : Any]) -> Swift.Void
@_spi(STP) public class STPAnalyticsClient : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol, STPAnalyticsClientProtocol
@_spi(STP) public static let sharedClient: StripeCore.STPAnalyticsClient { get }
@_spi(STP) public var _testLogHistory: [[Swift.String : Any]] { get set }
@_spi(STP) public var delegate: (any StripeCore.STPAnalyticsClientDelegate)? { get set }
@_spi(STP) public var productUsage: Swift.Set<Swift.String> { get set }
@_spi(STP) public static func tokenType(fromParameters: [Swift.AnyHashable : Any]) -> Swift.String?
@_spi(STP) public func addClass(toProductUsageIfNecessary: T.Type) -> Swift.Void
@_spi(STP) public func clearAdditionalInfo() -> Swift.Void
@_spi(STP) public static var isSimulatorOrTest: Swift.Bool { get }
@_spi(STP) public func additionalInfo() -> [Swift.String]
@_spi(STP) public func log(analytic: any StripeCore.Analytic, apiClient: StripeCore.STPAPIClient = $DEFAULT_ARG) -> Swift.Void
@_spi(STP) public func init() -> StripeCore.STPAnalyticsClient
@_spi(STP) public func commonPayload(_: StripeCore.STPAPIClient) -> [Swift.String : Any]
@_spi(STP) public func stringIfHasContentsElseNil(_: Swift.String?) -> Swift.String?
@_spi(STP) public typealias ImageDataAndSize = (imageData: Foundation.Data, imageSize: CoreFoundation.CGSize)
public protocol UnknownFieldsDecodable : Decodable
public var _allResponseFieldsStorage: StripeCore.NonEncodableParameters? { get set }
public var allResponseFields: [Swift.String : Any] { get }
public protocol UnknownFieldsEncodable : Encodable
public var _additionalParametersStorage: StripeCore.NonEncodableParameters? { get set }
public var additionalParameters: [Swift.String : Any] { get set }
public protocol SafeEnumDecodable : Decodable
public static var unparsable: Self { get }
public protocol SafeEnumCodable : Decodable, Encodable, SafeEnumDecodable
@_spi(STP) public enum UnknownFieldsCodableFloats : Equatable, Hashable, RawRepresentable
@_spi(STP) public case PositiveInfinity
@_spi(STP) public case NegativeInfinity
@_spi(STP) public case NaN
@_spi(STP) public func init(rawValue: Swift.String) -> StripeCore.UnknownFieldsCodableFloats?
@_spi(STP) public typealias RawValue = Swift.String
@_spi(STP) public var rawValue: Swift.String { get }
public protocol UnknownFieldsCodable : Decodable, Encodable, UnknownFieldsDecodable, UnknownFieldsEncodable
public struct NonEncodableParameters : CustomDebugStringConvertible, CustomLeafReflectable, CustomReflectable, CustomStringConvertible, Decodable, Encodable, Equatable
@_spi(STP) public var storage: [Swift.String : Any] { get }
public func init(from: any Swift.Decoder) throws -> StripeCore.NonEncodableParameters
public func encode(to: any Swift.Encoder) throws -> Swift.Void
public static func ==(_: StripeCore.NonEncodableParameters, _: StripeCore.NonEncodableParameters) -> Swift.Bool
public var customMirror: Swift.Mirror { get }
public var debugDescription: Swift.String { get }
public var description: Swift.String { get }
@_spi(STP) public class StripeJSONDecoder
@_spi(STP) public func init() -> StripeCore.StripeJSONDecoder
@_spi(STP) public var userInfo: [Swift.CodingUserInfoKey : Any] { get set }
@_spi(STP) public var inputFormatting: Foundation.JSONSerialization.ReadingOptions { get set }
@_spi(STP) public func decode(_: T.Type, from: Foundation.Data) throws -> T
@_spi(STP) public class StripeJSONEncoder
@_spi(STP) public var userInfo: [Swift.CodingUserInfoKey : Any] { get set }
@_spi(STP) public var outputFormatting: Foundation.JSONSerialization.WritingOptions { get set }
@_spi(STP) public func encode(_: T, includingUnknownFields: Swift.Bool = $DEFAULT_ARG) throws -> Foundation.Data
@_spi(STP) public func encodeJSONDictionary(_: T, includingUnknownFields: Swift.Bool = $DEFAULT_ARG) throws -> [Swift.String : Any]
public struct FinancialConnectionsEvent
public enum Name : Equatable, Hashable, RawRepresentable
public case open
public case manualEntryInitiated
public case consentAcquired
public case searchInitiated
public case institutionSelected
public case institutionAuthorized
public case accountsSelected
public case success
public case error
public case cancel
public case flowLaunchedInBrowser
public func init(rawValue: Swift.String) -> StripeCore.FinancialConnectionsEvent.Name?
public typealias RawValue = Swift.String
public var rawValue: Swift.String { get }
public struct Metadata
public let dictionary: [Swift.String : Any] { get }
public var manualEntry: Swift.Bool? { get }
public var institutionName: Swift.String? { get }
public var errorCode: StripeCore.FinancialConnectionsEvent.ErrorCode? { get }
@_spi(STP) public func init(institutionName: Swift.String? = $DEFAULT_ARG, manualEntry: Swift.Bool? = $DEFAULT_ARG, errorCode: StripeCore.FinancialConnectionsEvent.ErrorCode? = $DEFAULT_ARG) -> StripeCore.FinancialConnectionsEvent.Metadata
public enum ErrorCode : Equatable, Hashable, RawRepresentable
public case accountNumbersUnavailable
public case accountsUnavailable
public case noDebitableAccount
public case authorizationFailed
public case institutionUnavailablePlanned
public case institutionUnavailableUnplanned
public case institutionTimeout
public case unexpectedError
public case sessionExpired
public case failedBotDetection
public func init(rawValue: Swift.String) -> StripeCore.FinancialConnectionsEvent.ErrorCode?
public typealias RawValue = Swift.String
public var rawValue: Swift.String { get }
public let name: StripeCore.FinancialConnectionsEvent.Name { get }
public let metadata: StripeCore.FinancialConnectionsEvent.Metadata { get }
@_spi(STP) public func init(name: StripeCore.FinancialConnectionsEvent.Name, metadata: StripeCore.FinancialConnectionsEvent.Metadata = $DEFAULT_ARG) -> StripeCore.FinancialConnectionsEvent
@_spi(STP) public protocol FinancialConnectionsLinkedBank
@_spi(STP) public var sessionId: Swift.String { get }
@_spi(STP) public var accountId: Swift.String { get }
@_spi(STP) public var displayName: Swift.String? { get }
@_spi(STP) public var bankName: Swift.String? { get }
@_spi(STP) public var last4: Swift.String? { get }
@_spi(STP) public var instantlyVerified: Swift.Bool { get }
@_spi(STP) public protocol FinancialConnectionsSDKInterface
@_spi(STP) public func init() -> Self
@_spi(STP) public func presentFinancialConnectionsSheet(apiClient: StripeCore.STPAPIClient, clientSecret: Swift.String, returnURL: Swift.String?, onEvent: ((StripeCore.FinancialConnectionsEvent) -> Swift.Void)?, from: UIKit.UIViewController, completion: (StripeCore.FinancialConnectionsSDKResult) -> Swift.Void) -> Swift.Void
@_spi(STP) public enum FinancialConnectionsSDKResult
@_spi(STP) public case completed(StripeCore.FinancialConnectionsSDKResult.Completed)
@_spi(STP) public case cancelled
@_spi(STP) public case failed(error: any Swift.Error)
@_spi(STP) public enum Completed
@_spi(STP) public case financialConnections(any StripeCore.FinancialConnectionsLinkedBank)
@_spi(STP) public case instantDebits(any StripeCore.InstantDebitsLinkedBank)
@_spi(STP) public protocol InstantDebitsLinkedBank
@_spi(STP) public var paymentMethodId: Swift.String { get }
@_spi(STP) public var bankName: Swift.String? { get }
@_spi(STP) public var last4: Swift.String? { get }
@_spi(STP) public class Future
@_spi(STP) public typealias Result = Swift.Result<Value, any Swift.Error>
@_spi(STP) public func observe(on: Dispatch.DispatchQueue? = $DEFAULT_ARG, using: (StripeCore.Future<Value>.Result) -> Swift.Void) -> Swift.Void
@_spi(STP) public func chained(on: Dispatch.DispatchQueue? = $DEFAULT_ARG, using: (Value) throws -> StripeCore.Future<T>) -> StripeCore.Future<T>
@_spi(STP) public class Promise
@_spi(STP) public func init() -> StripeCore.Promise<Value>
@_spi(STP) public func init(value: Value) -> StripeCore.Promise<Value>
@_spi(STP) public func init(error: any Swift.Error) -> StripeCore.Promise<Value>
@_spi(STP) public func resolve(with: Value) -> Swift.Void
@_spi(STP) public func reject(with: any Swift.Error) -> Swift.Void
@_spi(STP) public func fullfill(with: StripeCore.Promise<Value>.Result) -> Swift.Void
@_spi(STP) public func fulfill(with: () throws -> Value) -> Swift.Void
@_spi(STP) public protocol BundleLocatorProtocol
@_spi(STP) public static var internalClass: Swift.AnyClass { get }
@_spi(STP) public static var bundleName: Swift.String { get }
@_spi(STP) public static var resourcesBundle: Foundation.Bundle { get }
@_spi(STP) public static var spmResourcesBundle: Foundation.Bundle { get }
@_spi(STP) public static func computeResourcesBundle() -> Foundation.Bundle
@_spi(STP) public final class FileDownloader
@_spi(STP) public func init(urlSession: Foundation.URLSession) -> StripeCore.FileDownloader
@_spi(STP) public func downloadFileTemporarily(from: Foundation.URL) -> StripeCore.Future<Foundation.URL>
@_spi(STP) public func downloadFile(from: Foundation.URL, fileReadingOptions: Foundation.Data.ReadingOptions = $DEFAULT_ARG) -> StripeCore.Future<Foundation.Data>
@_spi(STP) public class PaymentsSDKVariant
@_spi(STP) public static let variant: Swift.String { get }
@_spi(STP) public static var ocrTypeString: Swift.String { get }
@_spi(STP) public static var paymentUserAgent: Swift.String { get }
@_spi(STP) public func stpAssertionFailure(_: () -> Swift.String = $DEFAULT_ARG, file: Swift.StaticString = $DEFAULT_ARG, line: Swift.UInt = $DEFAULT_ARG) -> Swift.Void
@_spi(STP) public func stpAssert(_: () -> Swift.Bool, _: () -> Swift.String = $DEFAULT_ARG, file: Swift.StaticString = $DEFAULT_ARG, line: Swift.UInt = $DEFAULT_ARG) -> Swift.Void
@_spi(STP) public func stpDispatchToMainThreadIfNecessary(_: () -> Swift.Void) -> Swift.Void
public enum STPErrorCode : CustomStringConvertible, Equatable, Hashable, RawRepresentable
public case connectionError
public case invalidRequestError
public case authenticationError
public case apiError
public case cardError
public case cancellationError
public case ephemeralKeyDecodingError
public func init(rawValue: Swift.Int) -> StripeCore.STPErrorCode?
public typealias RawValue = Swift.Int
public var rawValue: Swift.Int { get }
public var description: Swift.String { get }
public class STPError : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol
public static let stripeDomain: Swift.String { get }
public static let STPPaymentHandlerErrorDomain: Swift.String { get }
public static let errorMessageKey: Swift.String { get }
public static let hintKey: Swift.String { get }
public static let cardErrorCodeKey: Swift.String { get }
public static let errorParameterKey: Swift.String { get }
public static let stripeErrorCodeKey: Swift.String { get }
public static let stripeErrorTypeKey: Swift.String { get }
public static let stripeDeclineCodeKey: Swift.String { get }
@_spi(STP) public static let stripeRequestIDKey: Swift.String { get }
public func init() -> StripeCore.STPError
public static let invalidNumber: Swift.String { get }
public static let invalidExpMonth: Swift.String { get }
public static let invalidExpYear: Swift.String { get }
public static let invalidCVC: Swift.String { get }
public static let incorrectNumber: Swift.String { get }
public static let expiredCard: Swift.String { get }
public static let cardDeclined: Swift.String { get }
public static let processingError: Swift.String { get }
public static let incorrectCVC: Swift.String { get }
public static let incorrectZip: Swift.String { get }
public enum STPCardErrorCode : Equatable, Hashable, RawRepresentable
public case invalidNumber
public case invalidExpMonth
public case invalidExpYear
public case invalidCVC
public case incorrectNumber
public case expiredCard
public case cardDeclined
public case incorrectCVC
public case processingError
public case incorrectZip
public func init(rawValue: Swift.String) -> StripeCore.STPCardErrorCode?
public typealias RawValue = Swift.String
public var rawValue: Swift.String { get }
@_spi(STP) public enum STPTextValidationState : Equatable, Hashable, RawRepresentable
@_spi(STP) public case empty
@_spi(STP) public case incomplete
@_spi(STP) public case complete
@_spi(STP) public case invalid
@_spi(STP) public func init(rawValue: Swift.Int) -> StripeCore.STPTextValidationState?
@_spi(STP) public typealias RawValue = Swift.Int
@_spi(STP) public var rawValue: Swift.Int { get }
@_spi(STP) public class STPNumericStringValidator : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol
@_spi(STP) public static func isStringNumeric(_: Swift.String) -> Swift.Bool
@_spi(STP) public static func sanitizedNumericString(for: Swift.String) -> Swift.String
@_spi(STP) public func init() -> StripeCore.STPNumericStringValidator
@_spi(STP) public protocol STPURLCallbackListener : NSObjectProtocol
@_spi(STP) public func handleURLCallback(_: Foundation.URL) -> Swift.Bool
@_spi(STP) public class STPURLCallbackHandler : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol
@_spi(STP) public static var sharedHandler: StripeCore.STPURLCallbackHandler { get set }
@_spi(STP) public static func shared() -> StripeCore.STPURLCallbackHandler
@_spi(STP) @discardableResult public func handleURLCallback(_: Foundation.URL) -> Swift.Bool
@_spi(STP) public func register(_: any StripeCore.STPURLCallbackListener, for: Foundation.URL) -> Swift.Void
@_spi(STP) public func unregisterListener(_: any StripeCore.STPURLCallbackListener) -> Swift.Void
@_spi(STP) public func init() -> StripeCore.STPURLCallbackHandler
@_spi(STP) public final class URLEncoder
@_spi(STP) public static func string(byURLEncoding: Swift.String) -> Swift.String
@_spi(STP) public static func convertToCamelCase(snakeCase: Swift.String) -> Swift.String
@_spi(STP) public static func convertToSnakeCase(camelCase: Swift.String) -> Swift.String
@_spi(STP) public static func queryString(from: [Swift.String : Any]) -> Swift.String
@_spi(STP) public final class STPLocalizationUtils
@_spi(STP) public static func localizedStripeString(forKey: Swift.String, bundleLocator: any StripeCore.BundleLocatorProtocol.Type) -> Swift.String
@_spi(STP) public func STPNonLocalizedString(_: Swift.String) -> Swift.String
@_spi(STP) public final class FraudDetectionData : Decodable, Encodable, Equatable
@_spi(STP) public static let shared: StripeCore.FraudDetectionData { get }
@_spi(STP) public var muid: Swift.String? { get set }
@_spi(STP) public var guid: Swift.String? { get set }
@_spi(STP) public var sid: Swift.String? { get set }
@_spi(STP) public func encode(to: any Swift.Encoder) throws -> Swift.Void
@_spi(STP) public func init(from: any Swift.Decoder) throws -> StripeCore.FraudDetectionData
@_spi(STP) public static func ==(_: StripeCore.FraudDetectionData, _: StripeCore.FraudDetectionData) -> Swift.Bool
@_spi(STP) public final class STPTelemetryClient : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol
@_spi(STP) public static var shared: StripeCore.STPTelemetryClient { get set }
@_spi(STP) public func addTelemetryFields(toParams: [Swift.String : Any]) -> Swift.Void
@_spi(STP) public func paramsByAddingTelemetryFields(toParams: [Swift.String : Any]) -> [Swift.String : Any]
@_spi(STP) public func sendTelemetryData(forceSend: Swift.Bool = $DEFAULT_ARG, completion: ((Swift.Result<[Swift.String : Any], any Swift.Error>) -> Swift.Void)? = $DEFAULT_ARG) -> Swift.Void
@_spi(STP) public func updateFraudDetectionIfNecessary(completion: ((Swift.Result<StripeCore.FraudDetectionData, any Swift.Error>) -> Swift.Void)) -> Swift.Void
@_spi(STP) public static func shouldSendTelemetry() -> Swift.Bool
@_spi(STP) public func init(sessionConfiguration: Foundation.URLSessionConfiguration) -> StripeCore.STPTelemetryClient
@_spi(STP) public func init() -> StripeCore.STPTelemetryClient
public class Bundle : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol, Sendable
@_spi(STP) public static func stp_applicationName() -> Swift.String?
@_spi(STP) public static func stp_applicationVersion() -> Swift.String?
@_spi(STP) public static func stp_applicationBundleId() -> Swift.String?
@_spi(STP) public static func buildVersion() -> Swift.String?
@_spi(STP) public static var displayName: Swift.String? { get }
public class NSError : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Error, Hashable, NSCoding, NSCopying, NSObjectProtocol, NSSecureCoding, Sendable
@_spi(STP) public static func stp_genericConnectionError() -> Foundation.NSError
@_spi(STP) public static func stp_genericFailedToParseResponseError() -> Foundation.NSError
@_spi(STP) public static func stp_ephemeralKeyDecodingError() -> Foundation.NSError
@_spi(STP) public static func stp_clientSecretError() -> Foundation.NSError
@_spi(STP) public static func stp_cardErrorInvalidNumberUserMessage() -> Swift.String
@_spi(STP) public static func stp_cardInvalidCVCUserMessage() -> Swift.String
@_spi(STP) public static func stp_cardErrorInvalidExpMonthUserMessage() -> Swift.String
@_spi(STP) public static func stp_cardErrorInvalidExpYearUserMessage() -> Swift.String
@_spi(STP) public static func stp_cardErrorExpiredCardUserMessage() -> Swift.String
@_spi(STP) public static func stp_cardErrorDeclinedUserMessage() -> Swift.String
@_spi(STP) public static func stp_genericDeclineErrorUserMessage() -> Swift.String
@_spi(STP) public static func stp_cardErrorProcessingErrorUserMessage() -> Swift.String
@_spi(STP) public static var stp_invalidOwnerName: Swift.String { get }
@_spi(STP) public static var stp_invalidBankAccountIban: Swift.String { get }
@_spi(STP) public static func stp_unexpectedErrorMessage() -> Swift.String
@_spi(STP) public class Utils
@_spi(STP) public static func localizedMessage(fromAPIErrorCode: Swift.String, declineCode: Swift.String? = $DEFAULT_ARG) -> Swift.String?
@_spi(STP) public static func cardErrorCode(fromAPIErrorCode: Swift.String) -> StripeCore.STPCardErrorCode?
@_spi(STP) public static func stp_error(from: StripeCore.StripeError) -> Foundation.NSError?
@_spi(STP) public static func stp_error(errorType: Swift.String?, stripeErrorCode: Swift.String?, stripeErrorMessage: Swift.String?, errorParam: Swift.String?, declineCode: Any?, httpResponse: Foundation.HTTPURLResponse?) -> Foundation.NSError?
@_spi(STP) public static func stp_error(fromStripeResponse: [Swift.AnyHashable : Any]?, httpResponse: Foundation.HTTPURLResponse?) -> Foundation.NSError?
public static func stp_error(fromStripeResponse: [Swift.AnyHashable : Any]?) -> Foundation.NSError?
public protocol Error : Sendable
@_spi(STP) public func serializeForV1Analytics() -> [Swift.String : Any]
@_spi(STP) public func serializeForV2Logging() -> [Swift.String : Any]
public struct Decimal : AdditiveArithmetic, Comparable, CustomStringConvertible, Decodable, Encodable, Equatable, ExpressibleByFloatLiteral, ExpressibleByIntegerLiteral, Hashable, Numeric, Sendable, SignedNumeric, Strideable
@_spi(STP) public var floatValue: Swift.Float { get }
public struct Dictionary : CVarArg, Collection, CustomDebugStringConvertible, CustomReflectable, CustomStringConvertible, Decodable, Encodable, Equatable, ExpressibleByDictionaryLiteral, Hashable, Sendable, Sequence
public func mergeAssertingOnOverwrites(_: [Key : Value]) -> Swift.Void
public func mergingAssertingOnOverwrites(_: S) -> [Key : Value]
@_spi(STP) public subscript subscript(jsonDict:) { get set }
public struct Locale : CustomDebugStringConvertible, CustomReflectable, CustomStringConvertible, Decodable, Encodable, Equatable, Hashable, ReferenceConvertible, Sendable
@_spi(STP) public var stp_regionCode: Swift.String? { get }
@_spi(STP) public var stp_currencyCode: Swift.String? { get }
@_spi(STP) public var stp_languageCode: Swift.String? { get }
@_spi(STP) public static var stp_isoRegionCodes: [Swift.String] { get }
public struct Array : BidirectionalCollection, CVarArg, Collection, ContiguousBytes, CustomDebugStringConvertible, CustomReflectable, CustomStringConvertible, DataProtocol, Decodable, DecodableWithConfiguration, Encodable, EncodableWithConfiguration, Equatable, ExpressibleByArrayLiteral, Hashable, MutableCollection, MutableDataProtocol, RandomAccessCollection, RangeReplaceableCollection, Sendable, Sequence
@_spi(STP) public func stp_boundSafeObject(at: Swift.Int) -> Element?
public func caseInsensitiveContains(_: Swift.String) -> Swift.Bool
@discardableResult public func remove(_: Element) -> Element?
@_spi(STP) public func heicData(compressionQuality: CoreGraphics.CGFloat = $DEFAULT_ARG) -> Foundation.Data?
public struct CharacterSet : CustomDebugStringConvertible, CustomStringConvertible, Decodable, Encodable, Equatable, ExpressibleByArrayLiteral, Hashable, ReferenceConvertible, Sendable, SetAlgebra
@_spi(STP) public static let stp_asciiDigit: Foundation.CharacterSet { get }
@_spi(STP) public static let stp_asciiLetters: Foundation.CharacterSet { get }
@_spi(STP) public static let stp_invertedAsciiDigit: Foundation.CharacterSet { get }
@_spi(STP) public static let stp_postalCode: Foundation.CharacterSet { get }
@_spi(STP) public static let stp_invertedPostalCode: Foundation.CharacterSet { get }
public struct URLRequest : CustomDebugStringConvertible, CustomReflectable, CustomStringConvertible, Equatable, Hashable, ReferenceConvertible, Sendable
@_spi(STP) public func stp_addParameters(toURL: [Swift.String : Any]) -> Swift.Void
@_spi(STP) public func stp_setFormPayload(_: [Swift.String : Any]) -> Swift.Void
@_spi(STP) public func stp_setMultipartForm(_: Foundation.Data?, boundary: Swift.String?) -> Swift.Void
public struct String : BidirectionalCollection, CVarArg, CodingKeyRepresentable, Collection, Comparable, CustomDebugStringConvertible, CustomReflectable, CustomStringConvertible, Decodable, Encodable, Equatable, ExpressibleByExtendedGraphemeClusterLiteral, ExpressibleByStringInterpolation, ExpressibleByStringLiteral, ExpressibleByUnicodeScalarLiteral, Hashable, LosslessStringConvertible, MirrorPath, RangeReplaceableCollection, Sendable, Sequence, StringProtocol, TextOutputStream, TextOutputStreamable
@_spi(STP) public func stp_stringByRemovingCharacters(from: Foundation.CharacterSet) -> Swift.String
@_spi(STP) public var isSecretKey: Swift.Bool { get }
@_spi(STP) public var nonEmpty: Swift.String? { get }
@_spi(STP) public enum Localized
@_spi(STP) public static var close: Swift.String { get }
@_spi(STP) public static var tryAgain: Swift.String { get }
@_spi(STP) public static var scan_card_title_capitalization: Swift.String { get }
@_spi(STP) public static var scan_card: Swift.String { get }
@_spi(STP) public static var scan_card_privacy_link_text: Swift.String { get }
@_spi(STP) public static func scanCardExpectedPrivacyLinkText() -> Foundation.NSAttributedString?
public class UIImage : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSCoding, NSItemProviderReading, NSItemProviderWriting, NSObjectProtocol, NSSecureCoding, Sendable, UIAccessibilityIdentification, UIItemProviderPresentationSizeProviding
@_spi(STP) public static let defaultCompressionQuality: CoreGraphics.CGFloat { get }
@_spi(STP) public func jpegDataAndDimensions(maxBytes: Swift.Int? = $DEFAULT_ARG, compressionQuality: CoreGraphics.CGFloat = $DEFAULT_ARG) -> StripeCore.ImageDataAndSize
@_spi(STP) public func heicDataAndDimensions(maxBytes: Swift.Int? = $DEFAULT_ARG, compressionQuality: CoreGraphics.CGFloat = $DEFAULT_ARG) -> StripeCore.ImageDataAndSize
@_spi(STP) public func resized(to: CoreGraphics.CGFloat) -> UIKit.UIImage?
public class URLSession : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSObjectProtocol, Sendable
@_spi(STP) public func stp_performDataTask(with: Foundation.URLRequest, completionHandler: (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void, retryCount: Swift.Int = $DEFAULT_ARG) -> Swift.Void
public class UIActivityIndicatorView : CALayerDelegate, CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSCoding, NSObjectProtocol, UIAccessibilityIdentification, UIActivityItemsConfigurationProviding, UIAppearance, UIAppearanceContainer, UICoordinateSpace, UIDynamicItem, UIFocusEnvironment, UIFocusItem, UIFocusItemContainer, UILargeContentViewerItem, UIPasteConfigurationSupporting, UIPopoverPresentationControllerSourceItem, UIResponderStandardEditActions, UITraitChangeObservable, UITraitEnvironment, UIUserActivityRestoring
@_spi(STP) public static var stp_isAnimationEnabled: Swift.Bool { get set }
@_spi(STP) public func stp_startAnimatingAndShow() -> Swift.Void
@_spi(STP) public func stp_stopAnimatingAndHide() -> Swift.Void
public class UIFont : CVarArg, CustomDebugStringConvertible, CustomStringConvertible, Equatable, Hashable, NSCoding, NSCopying, NSObjectProtocol, NSSecureCoding, Sendable
@_spi(STP) public static func preferredFont(forTextStyle: UIKit.UIFont.TextStyle, weight: UIKit.UIFont.Weight, maximumPointSize: CoreGraphics.CGFloat? = $DEFAULT_ARG) -> UIKit.UIFont
@_spi(STP) public func withPreferredSize(forTextStyle: UIKit.UIFont.TextStyle, weight: UIKit.UIFont.Weight? = $DEFAULT_ARG) -> UIKit.UIFont
