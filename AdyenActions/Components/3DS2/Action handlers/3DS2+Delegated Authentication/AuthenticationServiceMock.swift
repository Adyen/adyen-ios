//
// Copyright (c) 2022 Adyen N.V.
//
// This file is open source and available under the MIT license. See the LICENSE file for more info.
//

import Foundation
#if canImport(AdyenAuthentication)
    import AdyenAuthentication

    @available(iOS 14.0, *)
    internal final class AuthenticationServiceMock: AuthenticationServiceProtocol {
        internal func register(with input: RegistrationInput) async throws -> RegistrationOutput {
            // swiftlint:disable:next line_length
            try JSONDecoder().decode(RegistrationOutput.self, from: Data(base64Encoded: "")!)
        }
    
        internal func authenticate(with input: AuthenticationInput) async throws -> AuthenticationOutput {
            // swiftlint:disable:next line_length
            try JSONDecoder().decode(AuthenticationOutput.self, from: Data(base64Encoded: "eyJycElkIjoiQjJOWVNTNTkzMi5jb20uYWR5ZW4uQ2hlY2tvdXREZW1vVUlLaXQiLCJ2ZXJzaW9uIjoxLCJkZXZpY2UiOiJpT1MiLCJhc3NlcnRpb25PYmplY3QiOiJvbWx6YVdkdVlYUjFjbVZZUnpCRkFpRUFwY0ZMUFRFeUZmMXBUQXJlNXpJWXZSYkpnM3ZNUkxcL1N6aUp3U1Exb1hUNENJR3hzZXQ5Tll5WWlNaEFOTnFROU9aTEMzT3o1SFwvOXp2VVRNTzRTUDVXTDdjV0YxZEdobGJuUnBZMkYwYjNKRVlYUmhXQ1V2TGNMVTY0bjNmNGlpd1wvcFVaelNxdVdXaVZkeHA0eERMMU1nT3U1Z3BYMEFBQUFBQiIsImNyZWRlbnRpYWxJZCI6IkhNcGNPaVhDTm4rXC9maHVoR0JCUmlBQnA5Nmwzb2d5cU5MM25VMHFsdVFzPSJ9")!)
        }
    
        internal func reset() throws {}
    
        internal func checkSupport() throws -> CheckSupportOutput {
            try JSONDecoder().decode(CheckSupportOutput.self, from: Data(base64Encoded: "eyJkZXZpY2UiOiJpT1MifQ")!)
        }
    
    }
#endif
